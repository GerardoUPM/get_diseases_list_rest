#server.port=${METAMAP_SERVICE_PORT:8088} se usa cuando se levantan los servicio sin docker
#DISALIST = DISEASE AVAILABLE LIST
server.port=${DISALBUM_SERVICE_PORT:8088}

my.service.name = ${DISALBUM_SERVICE_NAME:DISEASES AVAILABLE LIST API REST}
my.service.code = ${DISALBUM_SERVICE_CODE:SE010}
#SNOMEDCT_US
my.service.authorization.name = ${AUTHORIZATION_SERVICE_NAME:auth-client}
my.service.authorization.url = ${AUTHORIZATION_SERVICE_URL:138.4.130.6:10605/api/authorization}
#my.service.authorization.url = ${AUTHORIZATION_SERVICE_URL:http://localhost:3000/api/authorization}
my.service.authorization.path = ${AUTHORIZATION_SERVICE_TOKEN_PATH:/token}
my.service.authorization.validation.update_query_runtime.path = ${AUTHORIZATION_SERVICE_UPDATE_QUERY_RUNTIME_PATH:/update_query_runtime}

my.header.param.token.name = ${HEADER_TOKEN:token}

my.service.rest.request.mapping.general.url = ${DISALBUM_SERVICE_ROOT_PATH:/api/disease_album}
my.service.rest.request.mapping.filter.path = ${DISALBUM_SERVICE_GET_PATH:/get}

my.service.extraction_history.dot_termination = ${DISALBUM_SERVICE_EXTRACTION_HISTORY_DOT_TERMINATION:.adis}
# ===============================
# = DATA SOURCE
# ===============================
spring.datasource.driver-class-name = com.mysql.jdbc.Driver
spring.datasource.url = ${AD_DB_DATASOURCE_URL:jdbc:mysql://localhost:3306/addb?autoReconnect=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8}
#spring.datasource.url = ${AD_DB_DATASOURCE_URL:jdbc:mysql://138.4.130.6:30603/addb?autoReconnect=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8}
spring.datasource.username = ${AD_DB_MYSQL_USER:ad_usr}
spring.datasource.password = ${AD_DB_MYSQL_PASSWORD:adNewPwd2017}

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.cloud.config.enabled=true
spring.jpa.show-sql = false
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.hbm2ddl.auto = validation

# ===============================
# = FEIGN NETFLIX
# ===============================
#CLAVE PARA QUE FUNCIONE FEIGN
hystrix.command.default.execution.timeout.enabled = false

# ===============================
# = JSON Web Token
# ===============================
jwt.header = ${JWT_HEADER:DISNET_Authorization}
jwt.secret = ${JWT_SECRET:d15n3t_53cr3t_1d}
jwt.expiration = ${JWT_EXPIRATION:604800}
jwt.route.authentication.path = ${JWT_AUTH_PATH:auth}
jwt.route.authentication.refresh = ${JWT_AUTH_REFRESH:refresh}

jwt.claims.name.token = ${JWT_CLAIMS_NAME_TOKEN:token}
jwt.claims.name.api_code = ${JWT_CLAIMS_NAME_API_CODE:api_code}
jwt.claims.name.request = ${JWT_CLAIMS_NAME_REQUEST:request}
jwt.claims.name.url = ${JWT_CLAIMS_NAME_URL:url}
jwt.claims.name.method = ${JWT_CLAIMS_NAME_METHOD:method}
jwt.claims.name.transaction_id = ${JWT_CLAIMS_NAME_TRANSACTION_ID:transaction_id}


# ===============================
# = EMAIL Configuration
# ===============================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${DISNET_EMAIL:gerardo.lagunes@ctb.upm.es}
spring.mail.password=${DISNET_PASSWORD:DisnetM@il007}
spring.mail.properties.mail.smtp.starttls.enabled=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

email.template.successful.procedure = ${EMAIL_TAMPLATE_SUCCESS:email/successful_email}
email.template.error.procedure = ${EMAIL_TAMPLATE_ERROR:email/error_email}
email.template.warning.procedure = ${EMAIL_TAMPLATE_ERROR:email/warning_email}

email.template.successful.procedure.subject.gdl_api = ${EMAIL_TAMPLATE_SUCCESSFUL_PROCEDURE_SUBJECT:DISNET - GDL API Successful Procedure Email}
email.template.error.procedure.subject.gdl_api = ${EMAIL_TAMPLATE_ERROR_PROCEDURE_SUBJECT:DISNET - GDL API Error Procedure Email}
email.template.warning.procedure.subject.gdl_api = ${EMAIL_TAMPLATE_WARNING_PROCEDURE_SUBJECT:DISNET - GDL API Warning Procedure Email}

email.template.from.noreply.address = ${EMAIL_TAMPLATE_FROM_NOREPLY_ADDRESS:noreply@disnet.ctb.upm.es}
email.template.from.noreply.personal = ${EMAIL_TAMPLATE_FROM_NOREPLY_PERSONAL:noreply@disnet.ctb.upm.es}

# ===============================
# = CONSTANTS
# ===============================
constants.http.header = ${HTTP_HEADER:http://}
constants.https.header = ${HTTPS_HEADER:https://}
constants.url.disnet_web_app = ${DISNET_WEB_APP_URL:localhost:3001}
constants.user.confirmation.path = ${USER_CONFIRMATION_PATH:/confirmation_email}
constants.parameter.user.confirmation.token.name = ${PARAMETER_USER_CONFIRMATION_TOKEN_NAME:token}

# ===============================
# = Error control
# ===============================
my.service.error_code = ${DISALBUM_SERVICE_ERROR_CODE:07}
disnet.general.error_code = ${DISNET_GENERAL_ERROR_CODE:DNERR_}


spring.application.name=get_diseases_list_rest
spring.cloud.config.server.bootstrap=true
spring.cloud.config.server.prefix=/config
spring.cloud.config.server.git.uri= file://${user.home}/Desktop/config